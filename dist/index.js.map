{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils/db.ts", "../src/utils/crypto.ts", "../src/utils/isProduction.ts", "../src/utils/auth.ts", "../src/utils/registerRoutes.ts", "../src/routes/admin/modify.ts", "../src/schemas/admin.ts", "../src/utils/get.ts", "../src/utils/admin/get.ts", "../src/utils/clearEmpty.ts", "../src/utils/set.ts", "../src/utils/admin/set.ts", "../src/utils/patterns.ts", "../src/utils/admin/supers.ts", "../src/routes/admin/students.ts", "../src/utils/student/gets.ts", "../src/schemas/student.ts", "../src/routes/admin/submitExam.ts", "../src/utils/student/get.ts", "../src/schemas/exam.ts", "../src/utils/create.ts", "../src/utils/exams/create.ts", "../src/utils/oss.ts", "../src/routes/admin/changeExam.ts", "../src/utils/exams/get.ts", "../src/utils/exams/set.ts", "../src/routes/admin/index.ts", "../src/routes/all/loginStudent.ts", "../src/routes/all/loginAdmin.ts", "../src/routes/all/index.ts", "../src/routes/superAdmin/registerAdmin.ts", "../src/utils/admin/create.ts", "../src/routes/superAdmin/registerStudent.ts", "../src/utils/student/create.ts", "../src/routes/superAdmin/index.ts", "../src/routes/student/exam.ts", "../src/routes/student/exams.ts", "../src/utils/exams/gets.ts", "../src/routes/student/modify.ts", "../src/utils/student/set.ts", "../src/routes/student/index.ts"],
  "sourcesContent": ["import * as dotenv from \"dotenv\";\n// Init env\n// Then can visit any defined variables in .env through process.env.VAR_NAME\ndotenv.config();\n// Finish init\nimport initDb from \"./utils/db.js\";\nimport { fastify as Fastify } from \"fastify\";\nimport swagger from \"@fastify/swagger\";\nimport swagger_ui from \"@fastify/swagger-ui\";\nimport multipart from \"@fastify/multipart\";\nimport cors from \"@fastify/cors\";\n\nimport adminRoute from \"./routes/admin/index.js\";\nimport { encryptPwd, signJwt, verifyJwt, verifyPwd } from \"./utils/crypto.js\";\nimport allRoute from \"./routes/all/index.js\";\nimport superAdminRoute from \"./routes/superAdmin/index.js\";\nimport studentRoute from \"./routes/student/index.js\";\nimport isProduction from \"./utils/isProduction.js\";\nimport { studentModel } from \"./schemas/student.js\";\nimport { adminModel } from \"./schemas/admin.js\";\nimport { examModel } from \"./schemas/exam.js\";\nimport client from \"./utils/oss.js\";\n\n// console.log(process.env.DB_URL);\n\n// Test oss\nclient;\n\n// Test JWT\nconst jwt = signJwt(\"id\", \"type\");\nconst result = verifyJwt(jwt);\nif (result?.id !== \"id\" || result?.type !== \"type\") {\n    throw \"jwt error\";\n}\n// Test PWD\nconst hash = await encryptPwd(\"password\");\nif (!(await verifyPwd(hash, \"password\"))) {\n    throw \"pwd error\";\n}\n\n// Connecting to MongoDB\nawait initDb();\n\n// Init test accounts\nif (!isProduction()) {\n    if (\n        (await examModel.find().exec()).length === 0 &&\n        (await studentModel.find({ username: \"testStudent\" }).exec()).length ===\n            0 &&\n        (\n            await adminModel\n                .find({\n                    username: \"testAdmin\",\n                    isSuperAdmin: false,\n                })\n                .exec()\n        ).length === 0 &&\n        (\n            await adminModel\n                .find({ username: \"testSuperAdmin\", isSuperAdmin: true })\n                .exec()\n        ).length === 0\n    ) {\n        const admin = new adminModel({\n            username: \"testAdmin\",\n            password: await encryptPwd(\"testPassword\"),\n            students: await studentModel.find().exec(),\n        });\n        await admin.save();\n\n        const student1 = new studentModel({\n            username: \"testStudent\",\n            password: await encryptPwd(\"testPassword\"),\n            admin: admin,\n        });\n        await student1.save();\n\n        const superAdmin = new adminModel({\n            username: \"testSuperAdmin\",\n            password: await encryptPwd(\"testPassword\"),\n            isSuperAdmin: true,\n        });\n        await superAdmin.save();\n\n        const student2 = new studentModel({\n            username: \"testStudent\",\n            password: await encryptPwd(\"testPassword\"),\n            admin: superAdmin,\n        });\n        await student2.save();\n\n        const exam1 = new examModel({\n            video: \"testVideoUrl\",\n            score: 0,\n            student: student1,\n        });\n        await exam1.save();\n\n        const exam2 = new examModel({\n            video: \"testVideoUrl\",\n            score: 0,\n            student: student2,\n        });\n        await exam2.save();\n    }\n}\n\n// Init fastify\nexport const fastify = Fastify({\n    logger: {\n        level: isProduction() ? \"info\" : \"debug\",\n    },\n});\n\n// Init swagger and swagger-ui\nif (!isProduction()) {\n    // add Swagger and Test route\n    await fastify.register(swagger);\n    await fastify.register(swagger_ui, {\n        routePrefix: \"/documentation\",\n        uiConfig: {\n            docExpansion: \"full\",\n            deepLinking: false,\n        },\n        uiHooks: {\n            // Following two functions should compile fine without type definitions,\n            // but sometimes vscode will show error, so I have to declare\n            // types here to avoid that.\n            onRequest: (\n                _request: unknown,\n                _reply: unknown,\n                next: () => unknown,\n            ) => {\n                next();\n            },\n            preHandler: (\n                _request: unknown,\n                _reply: unknown,\n                next: () => unknown,\n            ) => {\n                next();\n            },\n        },\n        staticCSP: true,\n        transformStaticCSP: (header) => header,\n        transformSpecification: (swaggerObject) => {\n            return swaggerObject;\n        },\n        transformSpecificationClone: true,\n    });\n    fastify.get(\"/hello\", () => {\n        return { hello: \"world\" };\n    });\n}\n\nawait fastify.register(multipart, { attachFieldsToBody: true });\nawait fastify.register(cors, {\n    allowedHeaders: [\"Content-Type\", \"Authorization\"],\n});\n\n// Register routes\nawait fastify.register(adminRoute, { prefix: \"/admin\" });\nawait fastify.register(superAdminRoute, { prefix: \"/super\" });\nawait fastify.register(studentRoute, { prefix: \"/student\" });\nawait fastify.register(allRoute);\n\nawait fastify.ready();\n\n// Start server\nconst port = parseInt(process.env.PORT || \"20080\");\nconst protocol = process.env.PROTOCOL || \"http\";\nconst host = process.env.HOST || \"127.0.0.1\";\nconst url = `${protocol}://${host}:${port}`;\nfastify.listen({ port }).catch((e) => {\n    fastify.log.error(e);\n    process.exit(1);\n});\n\nconsole.log(`Backend server started at ${url}`);\n", "import mongoose from \"mongoose\";\n\nconst initDb = async () => {\n    const env = process.env;\n    const mongoAuth =\n        env.DB_USERNAME && env.DB_PASSWORD\n            ? `${env.DB_USERNAME}:${env.DB_PASSWORD}@`\n            : \"\";\n    const mongoUrl = `${env.DB_PROTOCOL || \"mongodb://\"}${mongoAuth}${\n        env.DB_URL || \"localhost:27017\"\n    }/${env.DB_NAME || \"smanis\"}?authSource=admin`;\n    console.log(`Connecting to MongoDB ${mongoUrl}`);\n    mongoose.set(\"strictQuery\", false);\n    await mongoose.connect(mongoUrl);\n    console.log(\"Connect succeeded\");\n};\n\nexport default initDb;\n", "import argon2 from \"argon2\";\nimport jwt from \"jsonwebtoken\";\nimport isProduction from \"./isProduction.js\";\nimport { createHash } from \"crypto\";\n\nconst encryptPwd = async (plain: string): Promise<string> => {\n    return await argon2.hash(plain);\n};\n\nconst verifyPwd = async (hash: string, plain: string): Promise<boolean> => {\n    try {\n        return await argon2.verify(hash, plain);\n    } catch (e) {\n        console.log(e);\n        return false;\n    }\n};\n\nconst getSecret = (): string => {\n    return process.env.JWT_SECRET || \"\";\n};\n\nconst signJwt = (\n    id: string,\n    type: string,\n    expiresIn?: number | string,\n): string => {\n    if (expiresIn) {\n        return jwt.sign({ id, type }, getSecret(), {\n            algorithm: \"HS256\",\n            expiresIn: expiresIn,\n        });\n    } else {\n        return jwt.sign({ id, type }, getSecret());\n    }\n};\n\nconst verifyJwt = (token = \"\"): { id: string; type: string } | undefined => {\n    try {\n        return jwt.verify(token, getSecret()) as { id: string; type: string };\n    } catch (e) {\n        if (!isProduction()) {\n            console.log(e);\n        }\n        return;\n    }\n};\n\nconst digest = (text: string): string => {\n    return createHash(\"sha3-512\").update(text).digest(\"hex\");\n};\n\nexport { encryptPwd, verifyPwd, signJwt, verifyJwt, digest };\n", "const isProduction = (): boolean => {\n    return process.env.PRODUCTION === \"true\";\n};\n\nexport default isProduction;\n", "import { FastifyInstance } from \"fastify\";\nimport { verifyJwt } from \"./crypto.js\";\n\nenum AuthLevel {\n    student = 1,\n    admin,\n    superAdmin,\n}\n\nconst toAuthLevel = (level?: string): AuthLevel | undefined => {\n    if (level === \"student\") {\n        return AuthLevel.student;\n    } else if (level === \"admin\") {\n        return AuthLevel.admin;\n    } else if (level === \"superAdmin\") {\n        return AuthLevel.superAdmin;\n    }\n    return;\n};\n\nconst auth = (fastify: FastifyInstance, authLevel: AuthLevel) => {\n    fastify.addHook(\"preValidation\", async (request, reply) => {\n        const token = request.headers.authorization || \"\";\n        const { id, type } = verifyJwt(token) || {};\n        const level = toAuthLevel(type);\n        if (id && level && level) {\n            if (level >= authLevel) {\n                return;\n            }\n        }\n        return reply.code(401).send({ code: 404, message: \"Unauthorized\" });\n    });\n};\n\nexport { AuthLevel, toAuthLevel, auth };\n", "import { FastifyInstance } from \"fastify\";\n\nconst registerRoutes = (\n    fastify: FastifyInstance,\n    routes: ((fastify: FastifyInstance) => void)[],\n) => {\n    routes.forEach((route) => {\n        route(fastify);\n    });\n    return;\n};\n\nexport default registerRoutes;\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { FastifyInstance } from \"fastify\";\nimport { verifyJwt, verifyPwd } from \"../../utils/crypto.js\";\nimport httpErrors from \"http-errors\";\nimport getAdmin from \"../../utils/admin/get.js\";\nimport setAdmin from \"../../utils/admin/set.js\";\nimport {\n    objectIdPattern,\n    passwordPattern,\n    usernamePattern,\n} from \"../../utils/patterns.js\";\nimport getSuperAdminsCount from \"../../utils/admin/supers.js\";\n\nconst ModifyRequest = Type.Object({\n    adminId: Type.Optional(objectIdPattern),\n    newUsername: Type.Optional(usernamePattern),\n    password: Type.Optional(passwordPattern),\n    newPassword: Type.Optional(passwordPattern),\n    newIsSuperAdmin: Type.Optional(Type.Boolean()),\n});\ntype ModifyRequestType = Static<typeof ModifyRequest>;\n\nconst ModifyResponse = Type.Object({\n    adminId: Type.Optional(Type.String()),\n    username: Type.String(),\n    passwordChanged: Type.Boolean(),\n    isSuperAdmin: Type.Boolean(),\n});\ntype ModifyResponseType = Static<typeof ModifyResponse>;\n\nconst modify = (fastify: FastifyInstance): void => {\n    fastify.post<{\n        Body: ModifyRequestType;\n        Reply: ModifyResponseType | httpErrors.HttpError;\n    }>(\n        \"/modify\",\n        {\n            schema: {\n                body: ModifyRequest,\n                response: {\n                    201: ModifyResponse,\n                },\n            },\n        },\n        async (request, response) => {\n            const {\n                adminId,\n                newUsername,\n                password,\n                newPassword,\n                newIsSuperAdmin,\n            } = request.body;\n            const userId =\n                verifyJwt(request.headers.authorization || \"\")?.id || \"\";\n            let admin = await getAdmin(userId);\n            if (!admin) {\n                return response\n                    .status(404)\n                    .send(httpErrors.NotFound(`Admin ${userId} not found`));\n            }\n            if (!admin.isSuperAdmin) {\n                if (\n                    newIsSuperAdmin ||\n                    !password ||\n                    !(await verifyPwd(admin.password, password))\n                )\n                    return response\n                        .status(403)\n                        .send(\n                            httpErrors.Forbidden(\"You need to be superAdmin.\"),\n                        );\n            } else {\n                if (adminId) {\n                    admin = await getAdmin(adminId);\n                    if (!admin) {\n                        return response\n                            .status(404)\n                            .send(\n                                httpErrors.NotFound(\n                                    `Admin ${adminId} not found`,\n                                ),\n                            );\n                    }\n                }\n                if (\n                    newIsSuperAdmin === false &&\n                    (await getSuperAdminsCount()) <= 1\n                ) {\n                    return response\n                        .status(400)\n                        .send(\n                            httpErrors.BadRequest(\n                                \"Cannot remove last Super Admin\",\n                            ),\n                        );\n                }\n            }\n            await setAdmin(admin, {\n                username: newUsername,\n                password: newPassword,\n            });\n            return response.status(201).send({\n                id: admin._id.toString(),\n                username: newUsername || admin.username,\n                passwordChanged: newPassword !== undefined,\n                isSuperAdmin:\n                    newIsSuperAdmin !== undefined\n                        ? newIsSuperAdmin\n                        : admin.isSuperAdmin,\n            });\n        },\n    );\n};\n\nexport default modify;\n", "// import { model, Schema, Types } from \"mongoose\";\nimport { model, Schema } from \"mongoose\";\n// import autopopulate from \"mongoose-autopopulate\";\n// import { studentModel } from \"./student.js\";\n\ntype IAdmin = {\n    username: string;\n    password: string;\n    // students: Types.Array<Types.ObjectId>;\n    isSuperAdmin: boolean;\n    // createAt: Date;\n    // lastActiveAt: Date;\n};\nconst adminSchema = new Schema<IAdmin>(\n    {\n        username: {\n            type: String,\n            required: true,\n        },\n        password: {\n            type: String,\n            required: true,\n        },\n        // students: {\n        //     type: [\n        //         {\n        //             type: Schema.Types.ObjectId,\n        //             ref: studentModel,\n        //             // autopopulate: true,\n        //         },\n        //     ],\n        //     required: true,\n        //     default: [],\n        // },\n        isSuperAdmin: {\n            type: Boolean,\n            default: false,\n            required: true,\n        },\n        // createAt: {\n        //     type: Date,\n        //     required: true,\n        //     default: () => {\n        //         return Date.now();\n        //     },\n        // },\n        // lastActiveAt: {\n        //     type: Date,\n        //     required: true,\n        //     default: () => {\n        //         return Date.now();\n        //     },\n        // },\n    },\n    {\n        collection: \"admins\",\n    },\n);\n\n// adminSchema.plugin(autopopulate.default);\n\nconst adminModel = model(\"admins\", adminSchema);\n\nexport { adminSchema, adminModel, IAdmin };\n", "import { Model, Types } from \"mongoose\";\n\nconst get = async <T extends object>(\n    model: Model<T>,\n    userId: string | Types.ObjectId,\n) => {\n    return await model.findById(userId).exec();\n};\n\nexport default get;\n", "import { Types } from \"mongoose\";\nimport { adminModel, IAdmin } from \"../../schemas/admin.js\";\nimport get from \"../get.js\";\n\nconst getAdmin = async (adminId: string | Types.ObjectId) => {\n    return await get<IAdmin>(adminModel, adminId);\n};\n\nexport default getAdmin;\n", "type Entry<T> = {\n    [K in keyof T]: [K, T[K]];\n}[keyof T];\n\nconst clearEmpty = <T extends object>(itemProps: T) => {\n    return Object.fromEntries(\n        (Object.entries(itemProps) as Entry<typeof itemProps>[]).filter(\n            ([_, value]) => {\n                if (value !== undefined && value !== \"\") {\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n        ),\n    );\n};\n\nexport default clearEmpty;\n", "import { Document } from \"mongoose\";\nimport clearEmpty from \"./clearEmpty.js\";\n\nconst set = async <T extends object>(\n    item: Document & T,\n    itemProps: {\n        [K in keyof T]: T[K] | undefined;\n    },\n) => {\n    const finalProps = clearEmpty(itemProps);\n    await item.updateOne(finalProps).exec();\n    return;\n};\n\nexport default set;\n", "import { Document } from \"mongoose\";\nimport { IAdmin } from \"../../schemas/admin.js\";\nimport { encryptPwd } from \"../crypto.js\";\nimport set from \"../set.js\";\n\nconst setAdmin = async (\n    admin: Document & IAdmin,\n    adminProps: {\n        username?: string | undefined;\n        password?: string | undefined;\n        isSuperAdmin?: boolean | undefined;\n    },\n) => {\n    const finalProps = {\n        username: adminProps.username,\n        password:\n            adminProps.password && (await encryptPwd(adminProps.password)),\n        isSuperAdmin: adminProps.isSuperAdmin,\n    };\n    await set<IAdmin>(admin, finalProps);\n};\n\nexport default setAdmin;\n", "import { Type } from \"@sinclair/typebox\";\n\nconst usernamePattern = Type.String({\n    minLength: 2,\n    maxLength: 128,\n});\n\nconst passwordPattern = Type.String({\n    minLength: 8,\n    maxLength: 128,\n    // pattern:\n    //     \"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,128}$\",\n});\n\nconst userTypePattern = Type.Union([\n    Type.Literal(\"admin\"),\n    Type.Literal(\"superAdmin\"),\n    Type.Literal(\"student\"),\n]);\n\nconst objectIdPattern = Type.String({\n    minLength: 24,\n    maxLength: 24,\n});\n\nconst pointsPattern = Type.Record(Type.String(), Type.Integer());\n\nexport {\n    usernamePattern,\n    passwordPattern,\n    userTypePattern,\n    objectIdPattern,\n    pointsPattern,\n};\n", "import { adminModel } from \"../../schemas/admin.js\";\n\nconst getSuperAdminsCount = async (): Promise<number> => {\n    return await adminModel.find({ isSuperAdmin: true }).count().exec();\n};\n\nexport default getSuperAdminsCount;\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { FastifyInstance } from \"fastify\";\nimport { verifyJwt } from \"../../utils/crypto.js\";\nimport httpErrors from \"http-errors\";\nimport getStudents from \"../../utils/student/gets.js\";\nimport { objectIdPattern } from \"../../utils/patterns.js\";\nimport getAdmin from \"../../utils/admin/get.js\";\n\nconst StudentsRequest = Type.Object({\n    // Require superAdmin\n    adminId: Type.Optional(objectIdPattern),\n    offset: Type.Integer(),\n    count: Type.Integer(),\n});\ntype StudentsRequestType = Static<typeof StudentsRequest>;\n\nconst StudentsResponse = Type.Object({\n    hasNext: Type.Boolean(),\n    length: Type.Integer(),\n    students: Type.Array(\n        Type.Object({\n            studentId: Type.String(),\n            username: Type.String(),\n            admin: Type.String(),\n        }),\n    ),\n});\ntype StudentsResponseType = Static<typeof StudentsResponse>;\n\nconst students = (fastify: FastifyInstance): void => {\n    fastify.get<{\n        Querystring: StudentsRequestType;\n        Reply: StudentsResponseType | httpErrors.HttpError;\n    }>(\n        \"/students\",\n        {\n            schema: {\n                querystring: StudentsRequest,\n                response: {\n                    200: StudentsResponse,\n                },\n            },\n        },\n        async (request, response) => {\n            // Set query admin id\n            const userId = verifyJwt(request.headers.authorization)?.id || \"\";\n            const admin = await getAdmin(userId);\n            if (!admin) {\n                return response\n                    .status(404)\n                    .send(httpErrors.NotFound(\"Admin not found.\"));\n            }\n            const { adminId, offset, count } = request.query;\n            if (adminId && adminId !== userId && !admin.isSuperAdmin) {\n                return response\n                    .status(403)\n                    .send(\n                        httpErrors.Forbidden(\n                            \"Need to be superAdmin to get other admin's students.\",\n                        ),\n                    );\n            }\n            const searchResult = await getStudents({\n                adminId: adminId || userId,\n                offset,\n                count,\n            });\n            const students = searchResult.students.map((student) => {\n                return {\n                    studentId: student._id.toString(),\n                    username: student.username,\n                    admin: student.admin._id.toString(),\n                };\n            });\n            return response.status(200).send({ ...searchResult, students });\n        },\n    );\n};\n\nexport default students;\n", "import mongoose, { Types } from \"mongoose\";\nimport { ISimpleStudent, studentModel } from \"../../schemas/student.js\";\nimport IPI from \"../populateInterface.js\";\n\nconst getStudents = async (props: {\n    adminId: string | Types.ObjectId;\n    offset: number;\n    count: number;\n}): Promise<{\n    hasNext: boolean;\n    length: number;\n    students: IPI<ISimpleStudent>[];\n}> => {\n    const { adminId, offset, count } = props;\n    const adminObjectId = new mongoose.Types.ObjectId(adminId);\n    const length = await studentModel\n        .find({ admin: adminObjectId })\n        .count()\n        .exec();\n    const students = await studentModel\n        .find({ admin: adminObjectId })\n        .skip(offset)\n        .limit(count)\n        .exec();\n    const hasNext = offset + count < length;\n    return { length, hasNext, students };\n};\n\nexport default getStudents;\n", "import { model, Schema } from \"mongoose\";\nimport IPI from \"../utils/populateInterface.js\";\nimport { adminModel } from \"./admin.js\";\n// import autopopulate from \"mongoose-autopopulate\";\n\ntype ISimpleStudent = {\n    username: string;\n    admin: IPI<object>;\n};\n\ntype IStudent = ISimpleStudent & {\n    password: string;\n    // createAt: Date;\n    // lastActiveAt: Date;\n};\nconst studentSchema = new Schema<IStudent>(\n    {\n        username: {\n            type: String,\n            required: true,\n        },\n        password: {\n            type: String,\n            required: true,\n        },\n        admin: {\n            type: Schema.Types.ObjectId,\n            ref: adminModel,\n            required: true,\n        },\n        // createAt: {\n        //     type: Date,\n        //     required: true,\n        //     default: () => {\n        //         return Date.now();\n        //     },\n        // },\n        // lastActiveAt: {\n        //     type: Date,\n        //     required: true,\n        //     default: () => {\n        //         return Date.now();\n        //     },\n        // },\n    },\n    {\n        collection: \"students\",\n    },\n);\n\n// studentSchema.plugin(autopopulate.default);\n\nconst studentModel = model(\"students\", studentSchema);\n\nexport { studentSchema, studentModel, IStudent, ISimpleStudent };\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { FastifyInstance } from \"fastify\";\nimport { digest, verifyJwt } from \"../../utils/crypto.js\";\nimport httpErrors from \"http-errors\";\nimport getAdmin from \"../../utils/admin/get.js\";\nimport getStudent from \"../../utils/student/get.js\";\nimport { objectIdPattern } from \"../../utils/patterns.js\";\nimport createExam from \"../../utils/exams/create.js\";\nimport client from \"../../utils/oss.js\";\n\ntype submitFileType = {\n    toBuffer: () => Promise<Buffer>;\n};\n\nconst SubmitExamRequest = Type.Object({\n    video: Type.Object({\n        filename: Type.String(),\n        mimetype: Type.String(),\n        // toBuffer: Type.Function([], Type.Unknown()),\n    }),\n    score: Type.Object({\n        value: Type.Integer(),\n    }),\n    points: Type.Object({\n        value: Type.String(),\n    }),\n    student: Type.Object({\n        value: objectIdPattern,\n    }),\n});\ntype SubmitExamRequestType = Static<typeof SubmitExamRequest>;\n\nconst SubmitExamResponse = Type.Object({\n    video: Type.String(),\n    score: Type.Integer(),\n    points: Type.Record(Type.String(), Type.Integer()),\n    student: Type.String(),\n});\ntype SubmitExamResponseType = Static<typeof SubmitExamResponse>;\n\nconst submitExam = (fastify: FastifyInstance): void => {\n    fastify.post<{\n        Body: SubmitExamRequestType;\n        Reply: SubmitExamResponseType | httpErrors.HttpError;\n    }>(\n        \"/submitExam\",\n        {\n            schema: {\n                body: SubmitExamRequest,\n                response: {\n                    201: SubmitExamResponse,\n                },\n            },\n        },\n        async (request, response) => {\n            // Verify Admin\n            const adminId =\n                verifyJwt(request.headers.authorization || \"\")?.id || \"\";\n            const admin = await getAdmin(adminId);\n            if (!admin) {\n                return response\n                    .status(404)\n                    .send(httpErrors.NotFound(`Admin ${adminId} not found`));\n            }\n\n            // Find Student\n            const {\n                video: videoReq,\n                score: scoreReq,\n                points: pointsReq,\n                student: studentIdReq,\n            } = request.body;\n            const video = await (\n                videoReq as unknown as submitFileType\n            ).toBuffer();\n            const score = scoreReq.value;\n            const points = JSON.parse(pointsReq.value) as Record<\n                string,\n                number\n            >;\n\n            // Verify points\n            if (typeof points === \"object\") {\n                for (const [key, value] of Object.entries(points)) {\n                    const frame = parseInt(key);\n                    const score = parseInt(value as unknown as string);\n                    if (\n                        !Number.isInteger(frame) ||\n                        !Number.isInteger(score) ||\n                        frame <= 0 ||\n                        (score !== 8 && score !== 10)\n                    ) {\n                        return response\n                            .status(400)\n                            .send(\n                                httpErrors.BadRequest(\n                                    \"points key and value must be number\",\n                                ),\n                            );\n                    }\n                }\n            } else {\n                return response\n                    .status(400)\n                    .send(httpErrors.BadRequest(\"points must be an object\"));\n            }\n            const studentId = studentIdReq.value;\n            const student = await getStudent(studentId);\n            if (!student) {\n                return response\n                    .status(404)\n                    .send(\n                        httpErrors.NotFound(`Student ${studentId} not found`),\n                    );\n            }\n            if (!admin.isSuperAdmin && student.admin.toString() !== adminId) {\n                return response\n                    .status(401)\n                    .send(\n                        httpErrors.NotFound(\n                            `Submit exam associate with student ${studentId} is not allowed`,\n                        ),\n                    );\n            }\n\n            // Upload video\n            const currentTime = new Date(Date.now()).toJSON();\n            const storePath = `${student._id.toString()}/${currentTime}-${digest(\n                currentTime,\n            )}-${Math.round(Math.random() * 100)}.mp4`;\n            const url = (await client.put(storePath, video)).url;\n\n            await createExam(url, score, points, student);\n\n            return response.status(201).send({\n                video: url,\n                score,\n                points,\n                student: studentId,\n            });\n        },\n    );\n};\n\nexport default submitExam;\n", "import { Types } from \"mongoose\";\nimport { IStudent, studentModel } from \"../../schemas/student.js\";\nimport get from \"../get.js\";\n\nconst getStudent = async (studentId: string | Types.ObjectId) => {\n    return await get<IStudent>(studentModel, studentId);\n};\n\nexport default getStudent;\n", "import { model, Schema } from \"mongoose\";\nimport IPI from \"../utils/populateInterface.js\";\nimport { studentModel } from \"./student.js\";\n\ntype IExamUpdate = {\n    score: number;\n    points: Record<string, number>;\n};\n\ntype IExam = IExamUpdate & {\n    video: string;\n    student: IPI<object>;\n    takenTime: Date;\n    // lastUpdateTime: Date;\n};\nconst examSchema = new Schema<IExam>(\n    {\n        video: {\n            type: String,\n            required: true,\n        },\n        score: {\n            type: Number,\n            required: true,\n        },\n        points: {\n            type: Map,\n            of: Number,\n            required: true,\n            default: {},\n        },\n        student: {\n            type: Schema.Types.ObjectId,\n            ref: studentModel,\n            required: true,\n        },\n        takenTime: {\n            type: Date,\n            required: true,\n            default: () => {\n                return new Date(Date.now());\n            },\n        },\n        // lastUpdateTime: {\n        //     type: Date,\n        //     required: true,\n        //     default: () => {\n        //         return Date.now();\n        //     },\n        // },\n    },\n    {\n        collection: \"exams\",\n    },\n);\n\nconst examModel = model(\"exams\", examSchema);\n\nexport { examSchema, examModel, IExam, IExamUpdate };\n", "import { Model } from \"mongoose\";\nimport clearEmpty from \"./clearEmpty.js\";\n\nconst create = async <T extends object>(model: Model<T>, itemProps: T) => {\n    const finalProps = clearEmpty(itemProps);\n    const item = new model(finalProps);\n    await item.save();\n    return item;\n};\n\nexport default create;\n", "import { examModel } from \"../../schemas/exam.js\";\nimport { IStudent } from \"../../schemas/student.js\";\nimport create from \"../create.js\";\nimport IPI from \"../populateInterface.js\";\n\nconst createExam = async (\n    video: string,\n    score: number,\n    points: Record<string, number>,\n    student: IPI<IStudent>,\n) => {\n    const exam = create(examModel, {\n        video,\n        score,\n        points,\n        student,\n        takenTime: new Date(Date.now()),\n    });\n    return exam;\n};\n\nexport default createExam;\n", "import \"dotenv/config\";\nimport OSS from \"ali-oss\";\n\nconst client = new OSS({\n    region: process.env.OSS_REGION || \"\",\n    bucket: process.env.OSS_BUCKET || \"smanis\",\n    secure: true,\n    accessKeyId: process.env.OSS_ACCESS_KEY_ID || \"\",\n    accessKeySecret: process.env.OSS_ACCESS_KEY_SECRET || \"\",\n});\n\nexport default client;\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { FastifyInstance } from \"fastify\";\nimport { verifyJwt } from \"../../utils/crypto.js\";\nimport httpErrors from \"http-errors\";\nimport getAdmin from \"../../utils/admin/get.js\";\nimport getExam from \"../../utils/exams/get.js\";\nimport { objectIdPattern, pointsPattern } from \"../../utils/patterns.js\";\nimport getStudent from \"../../utils/student/get.js\";\nimport setExam from \"../../utils/exams/set.js\";\n\nconst ChangeExamRequest = Type.Object({\n    examId: objectIdPattern,\n    points: pointsPattern,\n});\ntype ChangeExamRequestType = Static<typeof ChangeExamRequest>;\n\nconst ChangeExamResponse = Type.Object({\n    examId: objectIdPattern,\n    points: pointsPattern,\n});\ntype ChangeExamResponseType = Static<typeof ChangeExamResponse>;\n\nconst changeExam = (fastify: FastifyInstance): void => {\n    fastify.post<{\n        Body: ChangeExamRequestType;\n        Reply: ChangeExamResponseType | httpErrors.HttpError;\n    }>(\n        \"/changeExam\",\n        {\n            schema: {\n                body: ChangeExamRequest,\n                response: {\n                    201: ChangeExamResponse,\n                },\n            },\n        },\n        async (request, response) => {\n            // Verify Admin\n            const { id: adminId = \"\" } =\n                verifyJwt(request.headers.authorization || \"\") || {};\n            const admin = await getAdmin(adminId);\n            if (!admin) {\n                return response\n                    .status(404)\n                    .send(httpErrors.NotFound(`Admin ${adminId} not found`));\n            }\n\n            // Find Student\n            const { examId, points } = request.body;\n            const exam = await getExam(examId);\n            if (!exam) {\n                return response\n                    .status(404)\n                    .send(httpErrors.NotFound(`Exam ${examId} not found`));\n            }\n            if (!admin.isSuperAdmin) {\n                const student = await getStudent(exam.student._id);\n                if (!student || student.admin._id.toString() !== adminId) {\n                    return response\n                        .status(403)\n                        .send(\n                            httpErrors.Forbidden(\n                                `Change exam ${examId} is not allowed`,\n                            ),\n                        );\n                }\n            }\n\n            // Change Student Info\n            await setExam(exam, points);\n\n            return response.status(201).send({\n                examId,\n                points,\n            });\n        },\n    );\n};\n\nexport default changeExam;\n", "import { Types } from \"mongoose\";\nimport { examModel, IExam } from \"../../schemas/exam.js\";\nimport get from \"../get.js\";\n\nconst getExam = async (examId: string | Types.ObjectId) => {\n    return await get<IExam>(examModel, examId);\n};\n\nexport default getExam;\n", "import { Document } from \"mongoose\";\nimport { IExam, IExamUpdate } from \"../../schemas/exam.js\";\nimport set from \"../set.js\";\n\nconst setExam = async (\n    exam: Document & IExam,\n    points: Record<string, number>,\n) => {\n    const score = Object.values(points).reduce((pre, cur) => pre + cur);\n    const finalProps = {\n        score,\n        points,\n    };\n    await set<IExamUpdate>(exam, finalProps);\n};\n\nexport default setExam;\n", "import { FastifyPluginCallback } from \"fastify\";\nimport { auth, AuthLevel } from \"../../utils/auth.js\";\nimport registerRoutes from \"../../utils/registerRoutes.js\";\nimport modify from \"./modify.js\";\nimport students from \"./students.js\";\nimport submitExam from \"./submitExam.js\";\nimport changeExam from \"./changeExam.js\";\n\nconst route: FastifyPluginCallback = (fastify, _opts, done) => {\n    auth(fastify, AuthLevel.admin);\n    registerRoutes(fastify, [modify, students, submitExam, changeExam]);\n\n    // Finish\n    done();\n};\n\nexport default route;\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { FastifyInstance } from \"fastify\";\nimport httpErrors from \"http-errors\";\nimport { signJwt, verifyPwd } from \"../../utils/crypto.js\";\nimport getStudent from \"../../utils/student/get.js\";\nimport { objectIdPattern, passwordPattern } from \"../../utils/patterns.js\";\n\nconst LoginStudentRequest = Type.Object({\n    id: objectIdPattern,\n    password: passwordPattern,\n});\ntype LoginStudentRequestType = Static<typeof LoginStudentRequest>;\n\nconst LoginStudentResponse = Type.Object({\n    id: Type.String(),\n    username: Type.String(),\n    token: Type.String(),\n});\ntype LoginStudentResponseType = Static<typeof LoginStudentResponse>;\n\nconst loginStudent = (fastify: FastifyInstance): void => {\n    fastify.post<{\n        Body: LoginStudentRequestType;\n        Reply: LoginStudentResponseType | httpErrors.HttpError;\n    }>(\n        \"/loginStudent\",\n        {\n            schema: {\n                body: LoginStudentRequest,\n                response: {\n                    200: LoginStudentResponse,\n                },\n            },\n        },\n        async (request, response) => {\n            try {\n                const { id, password } = request.body;\n                const student = await getStudent(id);\n                if (!student) throw \"\";\n                const username = student.username;\n                const hash = student.password;\n                if (await verifyPwd(hash, password)) {\n                    return response\n                        .status(200)\n                        .send({ token: signJwt(id, \"student\"), id, username });\n                } else throw \"\";\n            } catch {\n                // Login should not distinguish 404 or 400.\n                return response\n                    .status(400)\n                    .send(httpErrors.BadRequest(\"Wrong id or password\"));\n            }\n        },\n    );\n};\n\nexport default loginStudent;\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { FastifyInstance } from \"fastify\";\nimport httpErrors from \"http-errors\";\nimport { signJwt, verifyPwd } from \"../../utils/crypto.js\";\nimport getAdmin from \"../../utils/admin/get.js\";\nimport { objectIdPattern, passwordPattern } from \"../../utils/patterns.js\";\n\nconst LoginAdminRequest = Type.Object({\n    id: objectIdPattern,\n    password: passwordPattern,\n});\ntype LoginAdminRequestType = Static<typeof LoginAdminRequest>;\n\nconst LoginAdminResponse = Type.Object({\n    id: Type.String(),\n    username: Type.String(),\n    isSuperAdmin: Type.Boolean(),\n    token: Type.String(),\n});\ntype LoginAdminResponseType = Static<typeof LoginAdminResponse>;\n\nconst loginAdmin = (fastify: FastifyInstance): void => {\n    fastify.post<{\n        Body: LoginAdminRequestType;\n        Reply: LoginAdminResponseType | httpErrors.HttpError;\n    }>(\n        \"/loginAdmin\",\n        {\n            schema: {\n                body: LoginAdminRequest,\n                response: {\n                    200: LoginAdminResponse,\n                },\n            },\n        },\n        async (request, response) => {\n            try {\n                const { id, password } = request.body;\n                const admin = await getAdmin(id);\n                if (!admin) throw \"\";\n                const username = admin.username;\n                const hash = admin.password;\n                if (await verifyPwd(hash, password)) {\n                    return response.status(200).send({\n                        token: signJwt(id, \"admin\"),\n                        id,\n                        username,\n                        isSuperAdmin: admin.isSuperAdmin,\n                    });\n                } else throw \"\";\n            } catch {\n                // Login should not distinguish 404 or 400.\n                return response\n                    .status(400)\n                    .send(httpErrors.BadRequest(\"Wrong id or password\"));\n            }\n        },\n    );\n};\n\nexport default loginAdmin;\n", "import { FastifyPluginCallback } from \"fastify\";\nimport registerRoutes from \"../../utils/registerRoutes.js\";\nimport loginStudent from \"./loginStudent.js\";\nimport loginAdmin from \"./loginAdmin.js\";\n\nconst route: FastifyPluginCallback = (fastify, _opts, done) => {\n    registerRoutes(fastify, [loginStudent, loginAdmin]);\n\n    // Finish\n    done();\n};\n\nexport default route;\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { FastifyInstance } from \"fastify\";\nimport httpErrors from \"http-errors\";\nimport { passwordPattern, usernamePattern } from \"../../utils/patterns.js\";\nimport createAdmin from \"../../utils/admin/create.js\";\n\nconst RegisterAdminRequest = Type.Object({\n    username: usernamePattern,\n    password: passwordPattern,\n    isSuperAdmin: Type.Boolean(),\n});\ntype RegisterAdminRequestType = Static<typeof RegisterAdminRequest>;\n\nconst RegisterAdminResponse = Type.Object({\n    id: Type.String(),\n});\ntype RegisterAdminResponseType = Static<typeof RegisterAdminResponse>;\n\nconst registerAdmin = (fastify: FastifyInstance): void => {\n    fastify.post<{\n        Body: RegisterAdminRequestType;\n        Reply: RegisterAdminResponseType | httpErrors.HttpError;\n    }>(\n        \"/registerAdmin\",\n        {\n            schema: {\n                body: RegisterAdminRequest,\n                response: {\n                    201: RegisterAdminResponse,\n                },\n            },\n        },\n        async (request, response) => {\n            const { username, password, isSuperAdmin } = request.body;\n            const admin = await createAdmin(username, password, isSuperAdmin);\n            if (!admin) {\n                return response\n                    .status(400)\n                    .send(\n                        httpErrors.BadRequest(\n                            \"bad username or password or isSuperAdmin\",\n                        ),\n                    );\n            }\n            return response.status(201).send({ id: admin._id.toString() });\n        },\n    );\n};\n\nexport default registerAdmin;\n", "import { adminModel } from \"../../schemas/admin.js\";\nimport create from \"../create.js\";\nimport { encryptPwd } from \"../crypto.js\";\n\nconst createAdmin = async (\n    username: string,\n    password: string,\n    isSuperAdmin: boolean,\n) => {\n    const admin = create(adminModel, {\n        username,\n        password: await encryptPwd(password),\n        isSuperAdmin,\n    });\n    return admin;\n};\n\nexport default createAdmin;\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { FastifyInstance } from \"fastify\";\nimport httpErrors from \"http-errors\";\nimport getAdmin from \"../../utils/admin/get.js\";\nimport {\n    objectIdPattern,\n    passwordPattern,\n    usernamePattern,\n} from \"../../utils/patterns.js\";\nimport createStudent from \"../../utils/student/create.js\";\n\nconst RegisterStudentRequest = Type.Object({\n    username: usernamePattern,\n    password: passwordPattern,\n    adminId: objectIdPattern,\n});\ntype RegisterStudentRequestType = Static<typeof RegisterStudentRequest>;\n\nconst RegisterStudentResponse = Type.Object({\n    id: Type.String(),\n});\ntype RegisterStudentResponseType = Static<typeof RegisterStudentResponse>;\n\nconst registerStudent = (fastify: FastifyInstance): void => {\n    fastify.post<{\n        Body: RegisterStudentRequestType;\n        Reply: RegisterStudentResponseType | httpErrors.HttpError;\n    }>(\n        \"/registerStudent\",\n        {\n            schema: {\n                body: RegisterStudentRequest,\n                response: {\n                    201: RegisterStudentResponse,\n                },\n            },\n        },\n        async (request, response) => {\n            const { username, password, adminId } = request.body;\n            const admin = await getAdmin(adminId);\n            if (!admin) {\n                return response\n                    .status(400)\n                    .send(httpErrors.BadRequest(\"bad adminId\"));\n            }\n            const student = await createStudent(username, password, admin);\n            if (!student) {\n                return response\n                    .status(400)\n                    .send(httpErrors.BadRequest(\"bad username or password\"));\n            }\n            return response.status(201).send({ id: student._id.toString() });\n        },\n    );\n};\n\nexport default registerStudent;\n", "import { IAdmin } from \"../../schemas/admin.js\";\nimport { studentModel } from \"../../schemas/student.js\";\nimport create from \"../create.js\";\nimport { encryptPwd } from \"../crypto.js\";\nimport IPI from \"../populateInterface.js\";\n\nconst createStudent = async (\n    username: string,\n    password: string,\n    admin: IPI<IAdmin>,\n) => {\n    const student = create(studentModel, {\n        username,\n        password: await encryptPwd(password),\n        admin,\n    });\n    return student;\n};\n\nexport default createStudent;\n", "import { FastifyPluginCallback } from \"fastify\";\nimport { auth, AuthLevel } from \"../../utils/auth.js\";\nimport registerRoutes from \"../../utils/registerRoutes.js\";\nimport registerAdmin from \"./registerAdmin.js\";\nimport registerStudent from \"./registerStudent.js\";\n\nconst route: FastifyPluginCallback = (fastify, _opts, done) => {\n    auth(fastify, AuthLevel.superAdmin);\n    registerRoutes(fastify, [registerStudent, registerAdmin]);\n\n    // Finish\n    done();\n};\n\nexport default route;\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { FastifyInstance } from \"fastify\";\nimport { verifyJwt } from \"../../utils/crypto.js\";\nimport httpErrors from \"http-errors\";\nimport getExam from \"../../utils/exams/get.js\";\nimport getStudent from \"../../utils/student/get.js\";\nimport { objectIdPattern } from \"../../utils/patterns.js\";\nimport getAdmin from \"../../utils/admin/get.js\";\n\nconst ExamRequest = Type.Object({\n    examId: objectIdPattern,\n});\ntype ExamRequestType = Static<typeof ExamRequest>;\n\nconst ExamResponse = Type.Object({\n    examId: Type.String(),\n    video: Type.String(),\n    score: Type.Integer(),\n    points: Type.Record(Type.String(), Type.Number()),\n    student: Type.String(),\n    takenTime: Type.String(),\n});\ntype ExamResponseType = Static<typeof ExamResponse>;\n\nconst exam = (fastify: FastifyInstance): void => {\n    fastify.get<{\n        Querystring: ExamRequestType;\n        Reply: ExamResponseType | httpErrors.HttpError;\n    }>(\n        \"/exam\",\n        {\n            schema: {\n                querystring: ExamRequest,\n                response: {\n                    200: ExamResponse,\n                },\n            },\n        },\n        async (request, response) => {\n            const { examId } = request.query;\n            const exam = await getExam(examId);\n            if (!exam) {\n                return response\n                    .status(404)\n                    .send(\n                        httpErrors.NotFound(\n                            `Exam with ID ${examId}  not found`,\n                        ),\n                    );\n            }\n\n            const { id: userId = \"\", type } =\n                verifyJwt(request.headers.authorization) || {};\n            const studentId = exam.student._id.toString();\n            if (type === \"admin\") {\n                const admin = await getAdmin(userId);\n                if (!admin || !admin.isSuperAdmin) {\n                    const student = await getStudent(studentId);\n                    if (\n                        !student ||\n                        student.admin._id.toString() !== admin?._id.toString()\n                    ) {\n                        return response\n                            .status(403)\n                            .send(\n                                httpErrors.Forbidden(\"Not your student's exam\"),\n                            );\n                    }\n                }\n            } else {\n                // Student\n                if (userId !== studentId) {\n                    return response\n                        .status(401)\n                        .send(\n                            httpErrors.Unauthorized(\n                                `Exam ${examId} is not your exam`,\n                            ),\n                        );\n                }\n            }\n\n            return response.status(200).send({\n                examId: exam._id.toString(),\n                video: exam.video,\n                score: exam.score,\n                points: exam.points,\n                student: exam.student._id.toString(),\n                takenTime: exam.takenTime.toJSON(),\n            });\n        },\n    );\n};\n\nexport default exam;\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { FastifyInstance } from \"fastify\";\nimport { verifyJwt } from \"../../utils/crypto.js\";\nimport httpErrors from \"http-errors\";\nimport getExams from \"../../utils/exams/gets.js\";\nimport getStudent from \"../../utils/student/get.js\";\nimport { objectIdPattern } from \"../../utils/patterns.js\";\nimport getAdmin from \"../../utils/admin/get.js\";\n\nconst ExamsRequest = Type.Object({\n    studentId: Type.Optional(objectIdPattern),\n    offset: Type.Integer(),\n    count: Type.Integer(),\n});\ntype ExamsRequestType = Static<typeof ExamsRequest>;\n\nconst ExamsResponse = Type.Object({\n    hasNext: Type.Boolean(),\n    length: Type.Integer(),\n    exams: Type.Array(\n        Type.Object({\n            studentId: Type.String(),\n            score: Type.Integer(),\n            takenTime: Type.String(),\n        }),\n    ),\n});\ntype ExamsResponseType = Static<typeof ExamsResponse>;\n\nconst exams = (fastify: FastifyInstance): void => {\n    fastify.get<{\n        Querystring: ExamsRequestType;\n        Reply: ExamsResponseType | httpErrors.HttpError;\n    }>(\n        \"/exams\",\n        {\n            schema: {\n                querystring: ExamsRequest,\n                response: {\n                    200: ExamsResponse,\n                },\n            },\n        },\n        async (request, response) => {\n            const { studentId, offset, count } = request.query;\n            const { id: userId = \"\", type } =\n                verifyJwt(request.headers.authorization) || {};\n            let id = \"\";\n            if (type === \"student\") {\n                id = userId;\n            } else {\n                if (!studentId) {\n                    return response\n                        .status(400)\n                        .send(httpErrors.BadRequest(\"StudentId is required\"));\n                }\n                const admin = await getAdmin(userId);\n                const student = await getStudent(studentId);\n                if (\n                    !admin ||\n                    !student ||\n                    (!admin.isSuperAdmin &&\n                        student.admin._id.toString() !== admin._id.toString())\n                ) {\n                    return response\n                        .status(403)\n                        .send(httpErrors.Forbidden(\"Not your student\"));\n                }\n                id = student._id.toString();\n            }\n            const { hasNext, length, exams } = await getExams({\n                studentId: id,\n                offset,\n                count,\n            });\n            return response.status(200).send({\n                hasNext,\n                length,\n                exams: exams.map((exam) => {\n                    return {\n                        studentId: exam._id.toString(),\n                        score: exam.score,\n                        takenTime: exam.takenTime.toJSON(),\n                    };\n                }),\n            });\n        },\n    );\n};\n\nexport default exams;\n", "import mongoose, { Types } from \"mongoose\";\nimport { examModel, IExam } from \"../../schemas/exam.js\";\nimport IPI from \"../populateInterface.js\";\n\nconst getExams = async (props: {\n    studentId: string | Types.ObjectId;\n    offset: number;\n    count: number;\n}): Promise<{\n    hasNext: boolean;\n    length: number;\n    exams: IPI<IExam>[];\n}> => {\n    const { studentId, offset, count } = props;\n    const studentObjectId = new mongoose.Types.ObjectId(studentId);\n    const length = await examModel\n        .find({ student: studentObjectId })\n        .count()\n        .exec();\n    const exams = await examModel\n        .find({ student: studentObjectId })\n        .skip(offset)\n        .limit(count)\n        .exec();\n    const hasNext = offset + count < length;\n    return { length, hasNext, exams };\n};\n\nexport default getExams;\n", "import { Type, Static } from \"@sinclair/typebox\";\nimport { FastifyInstance } from \"fastify\";\nimport { verifyJwt, verifyPwd } from \"../../utils/crypto.js\";\nimport httpErrors from \"http-errors\";\nimport getStudent from \"../../utils/student/get.js\";\nimport setStudent from \"../../utils/student/set.js\";\nimport { passwordPattern, usernamePattern } from \"../../utils/patterns.js\";\n\nconst ModifyRequest = Type.Object({\n    newUsername: Type.Optional(usernamePattern),\n    password: passwordPattern,\n    newPassword: Type.Optional(passwordPattern),\n});\ntype ModifyRequestType = Static<typeof ModifyRequest>;\n\nconst ModifyResponse = Type.Object({\n    id: Type.String(),\n    username: Type.String(),\n    passwordChanged: Type.Boolean(),\n});\ntype ModifyResponseType = Static<typeof ModifyResponse>;\n\nconst modify = (fastify: FastifyInstance): void => {\n    fastify.post<{\n        Body: ModifyRequestType;\n        Reply: ModifyResponseType | httpErrors.HttpError;\n    }>(\n        \"/modify\",\n        {\n            schema: {\n                body: ModifyRequest,\n                response: {\n                    201: ModifyResponse,\n                },\n            },\n        },\n        async (request, response) => {\n            const { newUsername, password, newPassword } = request.body;\n            const { id: userId = \"\", type } =\n                verifyJwt(request.headers.authorization || \"\") || {};\n            let student;\n            if (type !== \"student\") {\n                return response\n                    .status(403)\n                    .send(\n                        httpErrors.Forbidden(\n                            \"You are not a student. If you are an admin, please use admin/changeStudent instead.\",\n                        ),\n                    );\n            } else {\n                student = await getStudent(userId);\n                if (\n                    !student ||\n                    !password ||\n                    !(await verifyPwd(student.password, password))\n                ) {\n                    return response\n                        .status(401)\n                        .send(\n                            httpErrors.Unauthorized(\n                                `Need student's correct password.`,\n                            ),\n                        );\n                }\n            }\n            await setStudent(student, {\n                username: newUsername,\n                password: newPassword,\n            });\n\n            return response.status(201).send({\n                id: student._id.toString(),\n                username: newUsername || student.username,\n                passwordChanged: newPassword !== undefined,\n            });\n        },\n    );\n};\n\nexport default modify;\n", "import { Document } from \"mongoose\";\nimport { IAdmin } from \"../../schemas/admin.js\";\nimport { IStudent } from \"../../schemas/student.js\";\nimport { encryptPwd } from \"../crypto.js\";\nimport IPI from \"../populateInterface.js\";\nimport set from \"../set.js\";\n\nconst setStudent = async (\n    student: Document & IStudent,\n    studentProps: {\n        username?: string | undefined;\n        password?: string | undefined;\n        admin?: IPI<IAdmin> | undefined;\n    },\n) => {\n    const finalProps = {\n        username: studentProps.username,\n        password:\n            studentProps.password && (await encryptPwd(studentProps.password)),\n        admin: studentProps.admin,\n    };\n    await set<IStudent>(student, finalProps);\n};\n\nexport default setStudent;\n", "import { FastifyPluginCallback } from \"fastify\";\nimport { auth, AuthLevel } from \"../../utils/auth.js\";\nimport registerRoutes from \"../../utils/registerRoutes.js\";\nimport exam from \"./exam.js\";\nimport exams from \"./exams.js\";\nimport modify from \"./modify.js\";\n\nconst route: FastifyPluginCallback = (fastify, _opts, done) => {\n    auth(fastify, AuthLevel.student);\n    registerRoutes(fastify, [modify, exam, exams]);\n\n    // Finish\n    done();\n};\n\nexport default route;\n"],
  "mappings": "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",
  "names": ["dotenv", "mongoose", "initDb", "env", "mongoAuth", "mongoUrl", "db_default", "Fastify", "swagger", "swagger_ui", "multipart", "cors", "argon2", "jwt", "isProduction", "isProduction_default", "createHash", "encryptPwd", "plain", "argon2", "verifyPwd", "hash", "getSecret", "signJwt", "id", "type", "expiresIn", "jwt", "verifyJwt", "token", "e", "isProduction_default", "digest", "text", "toAuthLevel", "level", "auth", "fastify", "authLevel", "request", "reply", "token", "id", "type", "verifyJwt", "registerRoutes", "fastify", "routes", "route", "registerRoutes_default", "Type", "httpErrors", "model", "Schema", "adminSchema", "adminModel", "get", "model", "userId", "get_default", "getAdmin", "adminId", "get_default", "adminModel", "clearEmpty", "itemProps", "_", "value", "clearEmpty_default", "set", "item", "itemProps", "finalProps", "clearEmpty_default", "set_default", "setAdmin", "admin", "adminProps", "finalProps", "encryptPwd", "set_default", "Type", "usernamePattern", "passwordPattern", "userTypePattern", "objectIdPattern", "pointsPattern", "getSuperAdminsCount", "adminModel", "supers_default", "ModifyRequest", "Type", "objectIdPattern", "usernamePattern", "passwordPattern", "ModifyResponse", "modify", "fastify", "request", "response", "adminId", "newUsername", "password", "newPassword", "newIsSuperAdmin", "userId", "verifyJwt", "admin", "get_default", "httpErrors", "supers_default", "verifyPwd", "set_default", "modify_default", "Type", "httpErrors", "mongoose", "model", "Schema", "studentSchema", "Schema", "adminModel", "studentModel", "model", "getStudents", "props", "adminId", "offset", "count", "adminObjectId", "mongoose", "length", "studentModel", "students", "hasNext", "gets_default", "StudentsRequest", "Type", "objectIdPattern", "StudentsResponse", "students", "fastify", "request", "response", "userId", "verifyJwt", "admin", "get_default", "httpErrors", "adminId", "offset", "count", "searchResult", "gets_default", "student", "students_default", "Type", "httpErrors", "getStudent", "studentId", "get_default", "studentModel", "model", "Schema", "examSchema", "Schema", "studentModel", "examModel", "model", "create", "model", "itemProps", "finalProps", "clearEmpty_default", "item", "create_default", "createExam", "video", "score", "points", "student", "create_default", "examModel", "OSS", "client", "oss_default", "SubmitExamRequest", "Type", "objectIdPattern", "SubmitExamResponse", "submitExam", "fastify", "request", "response", "adminId", "verifyJwt", "admin", "get_default", "httpErrors", "videoReq", "scoreReq", "pointsReq", "studentIdReq", "video", "score", "points", "key", "value", "frame", "studentId", "student", "currentTime", "storePath", "digest", "url", "oss_default", "create_default", "submitExam_default", "Type", "httpErrors", "getExam", "examId", "get_default", "examModel", "setExam", "exam", "points", "finalProps", "pre", "cur", "set_default", "ChangeExamRequest", "Type", "objectIdPattern", "pointsPattern", "ChangeExamResponse", "changeExam", "fastify", "request", "response", "adminId", "verifyJwt", "admin", "get_default", "httpErrors", "examId", "points", "exam", "student", "set_default", "changeExam_default", "route", "fastify", "_opts", "done", "auth", "registerRoutes_default", "modify_default", "students_default", "submitExam_default", "changeExam_default", "admin_default", "Type", "httpErrors", "LoginStudentRequest", "Type", "objectIdPattern", "passwordPattern", "LoginStudentResponse", "loginStudent", "fastify", "request", "response", "id", "password", "student", "get_default", "username", "hash", "verifyPwd", "signJwt", "httpErrors", "loginStudent_default", "Type", "httpErrors", "LoginAdminRequest", "Type", "objectIdPattern", "passwordPattern", "LoginAdminResponse", "loginAdmin", "fastify", "request", "response", "id", "password", "admin", "get_default", "username", "hash", "verifyPwd", "signJwt", "httpErrors", "loginAdmin_default", "route", "fastify", "_opts", "done", "registerRoutes_default", "loginStudent_default", "loginAdmin_default", "all_default", "Type", "httpErrors", "createAdmin", "username", "password", "isSuperAdmin", "create_default", "adminModel", "encryptPwd", "RegisterAdminRequest", "Type", "usernamePattern", "passwordPattern", "RegisterAdminResponse", "registerAdmin", "fastify", "request", "response", "username", "password", "isSuperAdmin", "admin", "create_default", "httpErrors", "registerAdmin_default", "Type", "httpErrors", "createStudent", "username", "password", "admin", "create_default", "studentModel", "encryptPwd", "RegisterStudentRequest", "Type", "usernamePattern", "passwordPattern", "objectIdPattern", "RegisterStudentResponse", "registerStudent", "fastify", "request", "response", "username", "password", "adminId", "admin", "get_default", "httpErrors", "student", "create_default", "registerStudent_default", "route", "fastify", "_opts", "done", "auth", "registerRoutes_default", "registerStudent_default", "registerAdmin_default", "superAdmin_default", "Type", "httpErrors", "ExamRequest", "Type", "objectIdPattern", "ExamResponse", "exam", "fastify", "request", "response", "examId", "get_default", "httpErrors", "userId", "type", "verifyJwt", "studentId", "admin", "student", "exam_default", "Type", "httpErrors", "mongoose", "getExams", "props", "studentId", "offset", "count", "studentObjectId", "mongoose", "length", "examModel", "exams", "hasNext", "gets_default", "ExamsRequest", "Type", "objectIdPattern", "ExamsResponse", "exams", "fastify", "request", "response", "studentId", "offset", "count", "userId", "type", "verifyJwt", "id", "httpErrors", "admin", "get_default", "student", "hasNext", "length", "gets_default", "exam", "exams_default", "Type", "httpErrors", "setStudent", "student", "studentProps", "finalProps", "encryptPwd", "set_default", "ModifyRequest", "Type", "usernamePattern", "passwordPattern", "ModifyResponse", "modify", "fastify", "request", "response", "newUsername", "password", "newPassword", "userId", "type", "verifyJwt", "student", "httpErrors", "get_default", "verifyPwd", "set_default", "modify_default", "route", "fastify", "_opts", "done", "auth", "registerRoutes_default", "modify_default", "exam_default", "exams_default", "student_default", "jwt", "signJwt", "result", "verifyJwt", "hash", "encryptPwd", "verifyPwd", "db_default", "isProduction_default", "examModel", "studentModel", "adminModel", "admin", "student1", "superAdmin", "student2", "fastify", "Fastify", "swagger", "swagger_ui", "_request", "_reply", "next", "header", "swaggerObject", "multipart", "cors", "admin_default", "superAdmin_default", "student_default", "all_default", "port", "protocol", "host", "url", "e"]
}
